name: LANCommander DockerHub Release

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lancommander/lancommander

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.trim_tag_ref.outputs.replaced }}
      version_semver: ${{ steps.trim_tag_ref.outputs.replaced }}
    steps:
      - uses: frabert/replace-string-action@v2
        name: Trim Tag Ref
        id: trim_tag_ref
        with:
          string: '${{ github.ref }}'
          pattern: 'refs/tags/v'
          replace-with: ''

  build_amd64:
    needs: prep
    uses: ./.github/workflows/LANCommander.Docker.yml
    secrets: inherit
    with:
      version_tag: ${{ needs.prep.outputs.version_tag }}
      version_semver: ${{ needs.prep.outputs.version_semver }}
      platform: linux
      arch: amd64

  build_arm64:
    needs: prep
    uses: ./.github/workflows/LANCommander.Docker.yml
    secrets: inherit
    with:
      version_tag: ${{ needs.prep.outputs.version_tag }}
      version_semver: ${{ needs.prep.outputs.version_semver }}
      platform: linux
      arch: arm64

  create_manifest:
    needs: [prep, build_amd64, build_arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }} \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }}-amd64 \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }}-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }}

      - name: Create and push latest manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }}-amd64 \
            --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prep.outputs.version_tag }}-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 