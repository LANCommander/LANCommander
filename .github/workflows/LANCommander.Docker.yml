name: LANCommander Docker

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lancommander/lancommander

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.trim_tag_ref.outputs.replaced }}
      version_semver: ${{ steps.trim_tag_ref.outputs.replaced }}
    steps:
      - uses: frabert/replace-string-action@v2
        name: Trim Tag Ref
        id: trim_tag_ref
        with:
          string: '${{ github.ref }}'
          pattern: 'refs/tags/v'
          replace-with: ''

  push_to_registry:
    needs: 
      - prep
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get last run of release workflow
        id: get_run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflowFileName = "LANCommander.Release.yml"; // change to your workflow file name

            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowFileName,
              per_page: 1,
              status: "completed"
            });

            const lastRun = runs.data.workflow_runs[0];

            core.setOutput("last_run_id", lastRun.id);
            core.setOutput("last_run_status", lastRun.conclusion);
            core.info(`Last run ID: ${lastRun.id}`);
            core.info(`Status: ${lastRun.conclusion}`);

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download Server x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: LANCommander.Server-Linux-x64-v${{ needs.prep.outputs.version_tag }}.zip
          path: ./
          run-id: ${{ steps.get_run.outputs.last_run_id }}

      - name: Extract Server Artifacts
        run: |
          mkdir -p ./LANCommander.Server/published
          unzip ./LANCommander.Server-Linux-x64-v${{ needs.prep.outputs.version_tag }}.zip -d ./LANCommander.Server/published

      # - name: Download Server arm64 Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: LANCommander.Server-Linux-arm64-v${{ needs.prep.outputs.version_tag }}.zip
      #     path: ./published

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./LANCommander.Server
          file: ./LANCommander.Server/Dockerfile
          push: true
          platforms: linux/amd64
          #platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:v${{ needs.prep.outputs.version_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prep.outputs.version_tag }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          provenance: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
