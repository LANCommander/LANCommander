name: LANCommander Docker

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lancommander/lancommander

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.trim_tag_ref.outputs.replaced }}
      version_semver: ${{ steps.trim_tag_ref.outputs.replaced }}
    steps:
      - uses: frabert/replace-string-action@v2
        name: Trim Tag Ref
        id: trim_tag_ref
        with:
          string: '${{ github.ref }}'
          pattern: 'refs/tags/v'
          replace-with: ''

  build_server_linux_arm64:
    needs: prep
    uses: ./.github/workflows/LANCommander.Server.yml
    with:
      version_semver: ${{ needs.prep.outputs.version_semver }}
      version_tag: ${{ needs.prep.outputs.version_tag }}
      build_runtime: linux-arm64
      build_arch: arm64
      build_platform: Linux

  build_server_linux_x64:
    needs: prep
    uses: ./.github/workflows/LANCommander.Server.yml
    with:
      version_semver: ${{ needs.prep.outputs.version_semver }}
      version_tag: ${{ needs.prep.outputs.version_tag }}
      build_runtime: linux-x64
      build_arch: x64
      build_platform: Linux

  push_to_registry:
    needs: 
      - prep
      - build_server_linux_arm64
      - build_server_linux_x64
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create build directories
        run: |
          mkdir -p ./Docker/build/linux-x64
          mkdir -p ./Docker/build/linux-arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download Server x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: LANCommander.Server-Linux-x64-v${{ needs.prep.outputs.version_tag }}
          path: ./Docker/build/linux-x64

      - name: Download Server arm64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: LANCommander.Server-Linux-arm64-v${{ needs.prep.outputs.version_tag }}
          path: ./Docker/build/linux-arm64

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./Docker
          file: ./Docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ needs.prep.outputs.version_tag }}
          labels: |
            org.opencontainers.image.title=LANCommander Server
            org.opencontainers.image.description="LANCommander Server Release Build"
            org.opencontainers.image.version=${{ needs.prep.outputs.version_semver }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.created_at }}
          build-args: |
            VERSION=${{ needs.prep.outputs.version_tag }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
