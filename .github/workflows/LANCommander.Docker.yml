name: LANCommander Docker

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lancommander/lancommander

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.trim_tag_ref.outputs.replaced }}
      version_semver: ${{ steps.trim_tag_ref.outputs.replaced }}
      build_dotnet_version: 9.0.102
    steps:
      - uses: frabert/replace-string-action@v2
        name: Trim Tag Ref
        id: trim_tag_ref
        with:
          string: '${{ github.ref }}'
          pattern: 'refs/tags/v'
          replace-with: ''

  # build_server_linux_arm64:
  #   needs: prep
  #   uses: ./.github/workflows/LANCommander.Server.yml
  #   with:
  #     version_semver: ${{ needs.prep.outputs.version_semver }}
  #     version_tag: ${{ needs.prep.outputs.version_tag }}
  #     build_runtime: linux-arm64
  #     build_arch: arm64
  #     build_platform: Linux

  build_server_linux_x64:
    needs: prep
    uses: ./.github/workflows/LANCommander.Server.yml
    with:
      build_dotnet_version: ${{ needs.prep.outputs.build_dotnet_version }}
      version_semver: ${{ needs.prep.outputs.version_semver }}
      version_tag: ${{ needs.prep.outputs.version_tag }}
      build_runtime: linux-x64
      build_arch: x64
      build_platform: Linux
      build_configuration: Release

  push_to_registry:
    needs: 
      - prep
      # - build_server_linux_arm64
      - build_server_linux_x64
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create build directories
        run: |
          mkdir -p ./Docker/build/linux-x64

        #mkdir -p ./Docker/build/linux-arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download Server x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: LANCommander.Server-Linux-x64-v${{ needs.prep.outputs.version_tag }}.zip
          path: .

      - name: Unzip artifacts
        run: |
          unzip -d ./Docker/build/linux-x64 ./LANCommander.Server-Linux-x64-v${{ needs.prep.outputs.version_tag }}.zip

      # - name: Download Server arm64 Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: LANCommander.Server-Linux-arm64-v${{ needs.prep.outputs.version_tag }}
      #     path: ./Docker/build/linux-arm64

      - name: Debug - List Build Directories
        run: |
          echo "Contents of ./Docker/build/linux-x64:"
          ls -la ./Docker/build/linux-x64
          echo "Contents of ./Docker:"
          ls -la ./Docker

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./LANCommander.Server
          file: ./LANCommander.Server/Dockerfile
          push: true
          platforms: linux/amd64
          #platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:v${{ needs.prep.outputs.version_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prep.outputs.version_tag }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          provenance: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
