@inject InstallService InstallService
@inject NavigationManager NavigationManager
@inject LocalizationService LocalizationService
@inject IJSRuntime JS

<Flex Justify="FlexJustify.Center" Align="FlexAlign.Center" Gap="FlexGap.Small" Class="footer">
    <div style="flex: 1;">
        @if (NavigationManager.Uri.Contains("/Depot"))
        {
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Hdd" OnClick="@(() => NavigationManager.NavigateTo("/"))">@LocalizationService.GetString("Library")</Button>
        }
        else
        {
            if (true)
            {
                <ConnectionStateView>
                    <Online>
                        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.AppstoreAdd" OnClick="@(() => NavigationManager.NavigateTo("/Depot"))">@LocalizationService.GetString("Depot")</Button>
                    </Online>
                    <Offline>
                        <Tooltip Title="@LocalizationService.GetString("YouAreCurrentlyOffline")" Placement="Placement.TopLeft">
                            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.AppstoreAdd" Disabled>@LocalizationService.GetString("Depot")</Button>
                        </Tooltip>
                    </Offline>
                </ConnectionStateView>
            }
        }
    </div>

    <ConnectionStateView>
        <Online>
            @if (InstallService.Queue.Any(qi => qi.State))
            {
                <div class="downloader" @onclick="() => ShowDownloadQueue()" style="flex-shrink: 0;">
                    <CurrentDownloadItem ShowIcon="true"/>
                </div>
            }
            else
            {
                <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Download" OnClick="() => ShowDownloadQueue()">@LocalizationService.GetString("Downloads")</Button>
            }
        </Online>
        <Offline>
            <Tooltip Title="@LocalizationService.GetString("YouAreCurrentlyOffline")" Placement="Placement.TopLeft">
                <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Download" Disabled>@LocalizationService.GetString("Downloads")</Button>
            </Tooltip>
        </Offline>
    </ConnectionStateView>

    <div style="flex: 1; text-align:  right;">
        <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Message" OnClick="OpenChatWindow">@LocalizationService.GetString("Chat")</Button>
    </div>
</Flex>

<DownloadQueue @ref="DownloadQueue" />

@code {
    [CascadingParameter] public bool Connected { get; set; }

    bool DownloadQueueVisible = false;

    DownloadQueue DownloadQueue;

    protected override async Task OnInitializedAsync()
    {
        InstallService.OnQueueChanged += async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    async Task ShowDownloadQueue()
    {
        await DownloadQueue.Show();
    }

    async Task OpenChatWindow()
    {
        await JS.InvokeVoidAsync("window.external.sendMessage", "openChat");
    }
}
