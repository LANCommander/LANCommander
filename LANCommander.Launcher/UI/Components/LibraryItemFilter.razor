@implements IDisposable
@using LANCommander.Launcher.Data.Models
@using LANCommander.Launcher.Models.Enums
@using LANCommander.Launcher.Models
@using System.Collections.ObjectModel
@inject LibraryService LibraryService
@inject EngineService EngineService
@inject GenreService GenreService
@inject TagService TagService
@inject MessageBusService MessageBusService

<Flex>
    <Input @bind-Value="LibraryService.Filter.SelectedOptions.Title" TValue="string" AllowClear BindOnInput DebounceMilliseconds="100" OnChange="ApplyFilter" />

    <Popover @ref="@Popover" Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})" OverlayClassName="library-filter" Placement="@Placement.TopLeft">
        <ChildContent>
            <Button Type="@ButtonType.Text" Icon="@IconType.Outline.Filter" />
        </ChildContent>
        <ContentTemplate>
            <Form @ref="Form" Model="LibraryService.Filter" OnFinish="ApplyFilter" Layout="@FormLayout.Vertical" Size="FormSize.Small">
                <FormItem Label="Title">
                    <Input @bind-Value="@context.SelectedOptions.Title" />
                </FormItem>
                <FormItem Label="Group By">
                    <Select @bind-Value="@context.SelectedOptions.GroupBy" TItem="GroupBy" TItemValue="GroupBy" DataSource="Enum.GetValues<GroupBy>()">
                        <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                        <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
                    </Select>
                </FormItem>
                <FormItem Label="Sort By">
                    <Flex>
                        <Select @bind-Value="@context.SelectedOptions.SortBy" TItem="SortBy" TItemValue="SortBy" DataSource="Enum.GetValues<SortBy>()">
                            <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                            <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
                        </Select>

                        @if (context.SelectedOptions.SortDirection == SDK.Enums.SortDirection.Ascending)
                        {
                            <Button Icon="@IconType.Outline.SortAscending" OnClick="() => context.SelectedOptions.SortDirection = SDK.Enums.SortDirection.Descending" />
                        }
                        else
                        {
                            <Button Icon="@IconType.Outline.SortDescending" OnClick="() => context.SelectedOptions.SortDirection = SDK.Enums.SortDirection.Ascending" />
                        }
                    </Flex>
                </FormItem>
                <FormItem Label="Engine">
                    <TagsInput Entities="context.DataSource.Engines" @bind-Values="@context.SelectedOptions.Engines" OptionLabelSelector="e => e.Name" TItem="Engine" />
                </FormItem>
                <FormItem Label="Genre">
                    <TagsInput Entities="context.DataSource.Genres" @bind-Values="@context.SelectedOptions.Genres" OptionLabelSelector="g => g.Name" TItem="Genre" />
                </FormItem>
                <FormItem Label="Tag">
                    <TagsInput Entities="context.DataSource.Tags" @bind-Values="@context.SelectedOptions.Tags" OptionLabelSelector="t => t.Name" TItem="Data.Models.Tag" />
                </FormItem>
                <FormItem Label="Platform">
                    <TagsInput Entities="context.DataSource.Platforms" @bind-Values="@context.SelectedOptions.Platforms" OptionLabelSelector="p => p.Name" TItem="Platform" />
                </FormItem>
                <FormItem Label="Developers">
                    <TagsInput Entities="context.DataSource.Developers" @bind-Values="@context.SelectedOptions.Developers" OptionLabelSelector="c => c.Name" TItem="Company" />
                </FormItem>
                <FormItem Label="Publishers">
                    <TagsInput Entities="context.DataSource.Publishers" @bind-Values="@context.SelectedOptions.Publishers" OptionLabelSelector="c => c.Name" TItem="Company" />
                </FormItem>
                <FormItem Label="Players">
                    <InputGroup Compact>
                        <AntDesign.InputNumber @bind-Value="@context.SelectedOptions.MinPlayers" Min="@context.DataSource.MinPlayers" Max="@context.DataSource.MaxPlayers" PlaceHolder="Minimum" Style="flex-grow: 1;" />
                        <Input TValue="string" InputElementSuffixClass="site-input-split" Style="width: 30px; border-left: 0; border-right: 0; pointer-events: none; text-align: center;" Placeholder="~" Disabled />
                        <AntDesign.InputNumber @bind-Value="@context.SelectedOptions.MaxPlayers" Min="@context.DataSource.MinPlayers" Max="@context.DataSource.MaxPlayers" PlaceHolder="Maximum" Style="flex-grow: 1;" />
                    </InputGroup>
                </FormItem>
                <FormItem>
                    <Checkbox @bind-Value="@context.SelectedOptions.Installed">Installed</Checkbox>
                </FormItem>
                <FormItem>
                    <Button Type="ButtonType.Primary" HtmlType="submit">Apply</Button>
                    <Button Type="@ButtonType.Text" OnClick="ResetFilter" Icon="@IconType.Outline.Close" Danger />
                </FormItem>
            </Form>
        </ContentTemplate>
    </Popover>
</Flex>

@code {
    Form<LibraryFilter> Form;

    Popover Popover;

    protected override async Task OnInitializedAsync()
    {
        await LibraryService.Filter.UpdateFilter();
        //LibraryService.Filter.Populate();
        // LibraryService.OnPreLibraryItemsFiltered += PopulateFilter;

    }

    async Task ResetFilter()
    {
        await LibraryService.Filter.ResetFilter();
    }

    async Task ApplyFilter()
    {
        await LibraryService.Filter.UpdateFilter();
        await Popover.Close();
    }

    public void Dispose()
    {
        //LibraryService.OnPreLibraryItemsFiltered -= PopulateFilter;
    }
}
