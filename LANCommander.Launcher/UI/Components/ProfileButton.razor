@using LANCommander.Launcher.Models
@inject ProfileService ProfileService
@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject ModalService ModalService

<Dropdown>
    <Overlay>
        <Menu>
            <MenuItem OnClick="ChangeAlias" Disabled="ConnectionState.OfflineModeEnabled">
                Change Name
            </MenuItem>
            <MenuItem OnClick="@(() => NavigationManager.NavigateTo("/Settings"))">
                Settings
            </MenuItem>

            @if (!ConnectionState.OfflineModeEnabled)
            {
                <MenuItem OnClick="Logout">
                    Logout
                </MenuItem>
            }
        </Menu>
    </Overlay>

    <ChildContent>
        <Button Type="ButtonType.Primary" Class="appbar-profile-button">
            @if (Settings.Profile.AvatarId != null && Settings.Profile.AvatarId != Guid.Empty)
            {
                <MediaImage Id="@Settings.Profile.AvatarId" />
            }

            <span>@Settings.Profile.Alias</span>
        </Button>
    </ChildContent>
</Dropdown>

@code {
    [CascadingParameter] public ConnectionState ConnectionState { get; set; }
    Models.Settings Settings = null;

    protected override async Task OnInitializedAsync()
    {
        Settings = SettingService.GetSettings();
    }

    async Task ChangeAlias()
    {
        var settings = SettingService.GetSettings();

        var modalOptions = new ModalOptions()
            {
                Title = "Change Name",
                Maximizable = false,
                DefaultMaximized = false,
                Closable = true,
                Centered = true
            };

        var modalRef = ModalService.CreateModal<ChangeAliasDialog, string, string>(modalOptions, settings.Profile.Alias);

        modalRef.OnOk = async (newName) =>
        {
            await ProfileService.ChangeAlias(newName);

            Settings = SettingService.GetSettings();

            await InvokeAsync(StateHasChanged);
        };
    }

    async Task Logout()
    {
        await AuthenticationService.Logout();

        NavigationManager.NavigateTo("/Authenticate");
    }
}