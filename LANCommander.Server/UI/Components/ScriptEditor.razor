@using LANCommander.SDK.Enums
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject ModalService ModalService
@inject IMessageService MessageService

<Flex Vertical Gap="FlexGap.Large">
    <DataTable
        @ref="Table"
        TItem="Script"
        HidePagination
        Responsive
        Query="s => (s.GameId != Guid.Empty && s.GameId == GameId) || (s.RedistributableId != Guid.Empty && s.RedistributableId == RedistributableId) || (s.ServerId != Guid.Empty && s.ServerId == ServerId)">
        <BoundDataColumn Property="s => s.Type">
            @context.Type.GetDisplayName()
        </BoundDataColumn>
        <BoundDataColumn Property="s => s.CreatedBy != null ? s.CreatedBy.UserName : String.Empty" Include="CreatedBy">
            @context.CreatedBy?.UserName
        </BoundDataColumn>
        <BoundDataColumn Property="s => s.CreatedOn" Format="MM/dd/yyyy hh:mm tt" />
        <DataActions>
            <Button OnClick="() => Edit(context.Id)" Icon="@IconType.Outline.Edit" Type="ButtonType.Text"/>

            <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this script?">
                <Button Icon="@IconType.Outline.Close" Type="ButtonType.Text" Danger/>
            </Popconfirm>
        </DataActions>
    </DataTable>

    <Flex Gap="FlexGap.Small" Justify="FlexJustify.End">
        <Button OnClick="() => Edit()" Type="ButtonType.Primary">Add Script</Button>
    </Flex>
</Flex>

<style>
    .monaco-editor-container {
        height: 600px;
    }
</style>

@code {
    [Parameter] public Guid GameId { get; set; }
    [Parameter] public Guid RedistributableId { get; set; }
    [Parameter] public Guid ServerId { get; set; }
    [Parameter] public Guid ArchiveId { get; set; }
    [Parameter] public IEnumerable<ScriptType> AllowedTypes { get; set; }

    DataTable<Script> Table;
    
    ICollection<Script> Scripts { get; set; } = new List<Script>();
    
    async void Edit(Guid? scriptId = null)
    {
        var modalOptions = new ModalOptions()
        {
            Title = scriptId == null ? "Add Script" : "Edit Script",
            Maximizable = false,
            DefaultMaximized = true,
            Closable = true,
            OkText = "Save"
        };

        var options = new ScriptEditorOptions()
        {
            ScriptId = scriptId ?? default,
            AllowedTypes = AllowedTypes,
            ArchiveId = ArchiveId,
            GameId = GameId,
            RedistributableId = RedistributableId,
            ServerId = ServerId
        };

        var modalRef = await ModalService.CreateModalAsync<ScriptEditorDialog, ScriptEditorOptions, Script>(modalOptions, options);

        modalRef.OnOk = async (script) =>
        {
            Table.Reload();
        };
    }

    async void Delete(Script script = null)
    {
        using (var scriptService = DatabaseServiceFactory.Create<ScriptService>())
        {
            if (script != null)
                await scriptService.DeleteAsync(script);
        }

        await MessageService.Success("Script deleted!");
    }
}
