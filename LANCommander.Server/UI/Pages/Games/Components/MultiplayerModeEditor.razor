@inject GameService GameService

<Flex Vertical Gap="FlexGap.Large">
    <Table TItem="MultiplayerMode" DataSource="@MultiplayerModes" HidePagination="true" Responsive>
        <PropertyColumn Property="m => m.Type">
            <Select @bind-Value="context.Type" TItem="MultiplayerType" TItemValue="MultiplayerType" DataSource="Enum.GetValues<MultiplayerType>()">
                <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
            </Select>
        </PropertyColumn>
        <PropertyColumn Property="m => m.MinPlayers" Title="Min Players">
            <AntDesign.InputNumber @bind-Value="context.MinPlayers" DefaultValue="2" Min="2" />
        </PropertyColumn>
        <PropertyColumn Property="m => m.MaxPlayers" Title="Max Players">
            <AntDesign.InputNumber @bind-Value="context.MaxPlayers" DefaultValue="2" Min="2" />
        </PropertyColumn>
        <PropertyColumn Property="m => m.NetworkProtocol" Title="Protocol">
            <Select @bind-Value="@context.NetworkProtocol" TItem="NetworkProtocol" TItemValue="NetworkProtocol" DataSource="Enum.GetValues<NetworkProtocol>()">
                <LabelTemplate Context="Value">@Value.GetDisplayName()</LabelTemplate>
                <ItemTemplate Context="Value">@Value.GetDisplayName()</ItemTemplate>
            </Select>
        </PropertyColumn>
        <PropertyColumn Property="m => m.Description">
            <Input Type="InputType.Text" @bind-Value="context.Description" />
        </PropertyColumn>
        <ActionColumn>
            <Flex Gap="FlexGap.Small" Justify="FlexJustify.End">
                <Button OnClick="() => RemoveMode(context)" Type="@ButtonType.Text" Danger Icon="@IconType.Outline.Close"/>
            </Flex>
        </ActionColumn>
    </Table>

    <Flex Justify="FlexJustify.End">
        <Button OnClick="AddMode" Type="@ButtonType.Primary">Add Mode</Button>
    </Flex>
</Flex>

@code {
    [Parameter] public Guid GameId { get; set; }

    ICollection<MultiplayerMode> MultiplayerModes = new List<MultiplayerMode>();

    protected override async Task OnInitializedAsync()
    {
        var game = await GameService.Include(g => g.MultiplayerModes).GetAsync(GameId);

        MultiplayerModes = game.MultiplayerModes;
    }
    
    async Task AddMode()
    {
        MultiplayerModes.Add(new MultiplayerMode());
    }

    async Task RemoveMode(MultiplayerMode mode)
    {
        MultiplayerModes.Remove(mode);
    }

    public async Task Save()
    {
        var game = await GameService.Include(g => g.MultiplayerModes).GetAsync(GameId);

        game.MultiplayerModes = MultiplayerModes;

        await GameService.UpdateAsync(game);
        
        game = await GameService.GetAsync(GameId);
    }
}
