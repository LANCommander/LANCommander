@page "/Games/{id:guid}/Actions"
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject ILogger<Actions> Logger

<GameEditView Id="Id" Title="Actions">
    <TitleExtraTemplate>
        <Space Direction="SpaceDirection.Horizontal">
            <SpaceItem>
                <Button Type="ButtonType.Primary" OnClick="() => Save(context)">Save</Button>
            </SpaceItem>
        </Space>
    </TitleExtraTemplate>

    <ChildContent>
        <ActionEditor @bind-Actions="context.Actions" ArchiveId="@GetLatestArchiveId(context)" />
    </ChildContent>
</GameEditView>

@code {
    [Parameter] public Guid Id { get; set; }

    Guid GetLatestArchiveId(Game game)
    {
        if (game != null && game.Archives != null && game.Archives.Count > 0)
            return game.Archives.OrderByDescending(a => a.CreatedOn).FirstOrDefault()?.Id ?? Guid.Empty;
        else
            return Guid.Empty;
    }

    async Task Save(Game game)
    {
        try
        {
            using (var gameService = DatabaseServiceFactory.Create<GameService>())
            {
                game = await gameService.UpdateAsync(game);
            }

            await MessageService.Success("Save paths updated!");
        }
        catch (Exception ex)
        {
            MessageService.Error("Could not update save paths!");
            Logger.LogError(ex, "Could not update save paths!");
        }
    }
}
