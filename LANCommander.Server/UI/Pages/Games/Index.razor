@page "/Games"
@using AntDesign.TableModels;
@using LANCommander.SDK.Enums
@using LANCommander.Server.Data
@using LANCommander.Server.Extensions;
@using System.ComponentModel.DataAnnotations;
@using LANCommander.Server.Models
@using LANCommander.Server.Services.Factories
@using LANCommander.Server.UI.Pages.Games.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.EntityFrameworkCore;
@using System.Web
@attribute [Authorize]
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject NavigationManager NavigationManager
@inject ModalService ModalService
@inject IMessageService MessageService
@inject ILogger<Index> Logger

<PageHeader Title="Games" />

<DataTable
    @ref="Table"
    TItem="Game"
    LoadData="LoadData"
    @bind-SelectedRows="Selected"
    Size="@TableSize.Small"
    Responsive>
    <RightToolbar>
        @if (Selected != null && Selected.Count() > 0)
        {
            <Button OnClick="() => AddToCollection()" Type="@ButtonType.Primary">Add to Collection</Button>
        }
        <Button Type="@ButtonType.Default" OnClick="OpenImportDialog">Import</Button>
        <Button OnClick="() => Add()" Type="@ButtonType.Primary">Add Game</Button>
    </RightToolbar>
    <Columns>
        <Selection Key="@(context.Id.ToString())" CheckStrictly="true" />

        <DataColumn TData="string" Title="Icon">
            <Image Src="@GetIcon(context)" Height="32" Width="32" Preview="false"></Image>
        </DataColumn>

        <BoundDataColumn Property="g => g.Title" />
    
        <DataColumn TData="bool" Title="Multiplayer">
            <Checkbox Disabled="true" Checked="context.MultiplayerModes?.Count > 0" />
        </DataColumn>

        <DataColumn TData="int" Title="Total Keys">
            @context.Keys?.Count
        </DataColumn>

        <DataColumn TData="int" Title="Keys Allocated">
            @context.Keys?.Count(k => k.ClaimedOn.HasValue)
        </DataColumn>

        <DataColumn TData="string[]" Title="Collections">
            @if (context.Collections != null)
                foreach (var collection in context.Collections)
                {
                    <Tag>@collection.Name</Tag>
                }
        </DataColumn>

        <DataColumn TData="string[]" Title="Developers">
            @if (context.Developers != null)
                foreach (var dev in context.Developers)
                {
                    <Tag>@dev.Name</Tag>
                }
        </DataColumn>

        <DataColumn TData="string[]" Title="Publishers">
            @if (context.Publishers != null)
                foreach (var pub in context.Publishers)
                {
                    <Tag>@pub.Name</Tag>
                }
        </DataColumn>

        <DataColumn TData="string[]" Title="Genres">
            @if (context.Genres != null)
                foreach (var genre in context.Genres)
                {
                    <Tag>@genre.Name</Tag>
                }
        </DataColumn>

        <DataColumn TData="string[]" Title="Platforms">
            @if (context.Platforms != null)
                foreach (var platform in context.Platforms)
                {
                    <Tag>@platform.Name</Tag>
                }
        </DataColumn>

        <DataColumn TData="SDK.Enums.MultiplayerType[]" Title="Multiplayer Modes">
            @if (context.MultiplayerModes != null)
                foreach (var mode in context.MultiplayerModes.Select(mm => mm.Type).Distinct())
                {
                    <Tag>@mode.GetDisplayName()</Tag>
                }
        </DataColumn>

        <DataActions>
            <a href="@($"/Games/{context.Id}")" class="ant-btn ant-btn-primary">Edit</a>
            <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this game?">
                <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
            </Popconfirm>
        </DataActions>
    </Columns>
</DataTable>

@code {
    IEnumerable<Game> Games { get; set; } = new List<Game>();

    string Url;

    bool Visibility = false;

    IEnumerable<Game> Selected;

    DataTable<Game> Table;
    ImportUploadDialog ImportUploadDialog;

    async Task<PaginatedResults<Game>> LoadData(int pageIndex, int pageSize, string search)
    {
        using (var gameService = DatabaseServiceFactory.Create<GameService>())
        {
            return await gameService
                .SortBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle)
                .Include(
                    g => g.DependentGames,
                    g => g.Media.Where(m => m.Type == MediaType.Icon),
                    g => g.Keys,
                    g => g.CreatedBy,
                    g => g.UpdatedBy,
                    g => g.Collections,
                    g => g.MultiplayerModes,
                    g => g.Developers,
                    g => g.Publishers,
                    g => g.Genres,
                    g => g.Platforms
                )
                .PaginateAsync(
                    g => g.Type == GameType.MainGame
                    ||
                    g.Type == GameType.StandaloneExpansion
                    ||
                    g.Type == GameType.StandaloneMod
                    ||
                    g.BaseGame == null,
                    pageIndex,
                    pageSize);
        }
    }

    string GetIcon(Game game)
    {
        var media = game?.Media?.FirstOrDefault(m => m.Type == SDK.Enums.MediaType.Icon);

        if (media != null)
            return $"/api/Media/{media.Id}/Download?fileId={media.FileId}";
        else
            return "/favicon.ico";
    }

    void Add()
    {
        NavigationManager.NavigateTo("/Games/Add");
    }

    async Task Delete(Game game)
    {
        using (var gameService = DatabaseServiceFactory.Create<GameService>())
        {
            try
            {
                await gameService.DeleteAsync(game);

                MessageService.Success($"{game.Title} was successfully deleted!");
            }
            catch (Exception ex)
            {
                MessageService.Error("Could not delete the game!");
                Logger.LogError(ex, "Could not delete the game!");
            }
        }

        // await LoadData();
    }

    async void AddToCollection()
    {
        var modalOptions = new ModalOptions()
            {
                Title = "Add to Collection",
                Maximizable = false,
                DefaultMaximized = false,
                Closable = true,
                OkText = "Add"
            };

        var options = new AddToCollectionOptions()
        {
            GameIds = Selected.Select(g => g.Id)
        };

        var modalRef = await ModalService.CreateModalAsync<AddToCollectionDialog, AddToCollectionOptions, IEnumerable<Collection>>(modalOptions, options);

        modalRef.OnOk = async (collections) =>
        {
            Table.UnselectAll();
            // await LoadData();
        };
    }

    async Task OpenImportDialog()
    {
        var options = new ImportDialogOptions
        {
            Hint = "Only LCX files are supported for importing games"
        };

        var modalOptions = new ModalOptions
        {
            Title = "Import Game",
            DestroyOnClose = true,
            OnOk = (e) => Table.LoadData(Table.PageIndex, Table.PageSize, Table.Search),
            OnCancel = (e) => Table.LoadData(Table.PageIndex, Table.PageSize, Table.Search),
            Footer = null,
        };

        ModalService.CreateModal<ImportUploadDialog, ImportDialogOptions>(modalOptions, options);
    }
}
