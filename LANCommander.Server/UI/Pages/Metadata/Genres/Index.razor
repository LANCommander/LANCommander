@page "/Metadata/Genres"
@using Microsoft.EntityFrameworkCore;
@using LANCommander.Server.Data
@using System.Web
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject ILogger<Index> Logger

<PageHeader Title="Genres" />

<DataTable
    TItem="Genre"
    Size="@TableSize.Small"
    Searchable
    SearchProperty="g => g.Name">
    <RightToolbar>
        <Button OnClick="() => OpenEdit(null)" Type="@ButtonType.Primary">Add Genre</Button>
    </RightToolbar>
    <Columns>
        <BoundDataColumn Property="g => g.Name" Sortable DefaultSortOrder="SortDirection.Ascending" />
        <BoundDataColumn Property="g => g.Games.Count" Sortable Title="Games" Include="Games" />
        <BoundDataColumn Property="g => g.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
        <BoundDataColumn Property="g => g.CreatedBy != null ? g.CreatedBy.UserName : String.Empty" Title="Created By" Sortable Include="CreatedBy" />
        <BoundDataColumn Property="g => g.UpdatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
        <BoundDataColumn Property="g => g.UpdatedBy != null ? g.UpdatedBy.UserName : String.Empty" Title="Updated By" Sortable Include="UpdatedBy" />
        <DataActions>
            <a href="@($"/Metadata/Genres/{context.Id}")" class="ant-btn ant-btn-primary">Edit</a>
            <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this genre?">
                <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
            </Popconfirm>
        </DataActions>
    </Columns>
</DataTable>

<Modal Title="@(GenreContext.Id == Guid.Empty ? "New Genre" : "Edit Genre")"
    @bind-Visible="@EditGenreVisible"
    OnOk="UpdateOrAdd"
    OnCancel="CloseEdit">
    <Form Model="@GenreContext">
        <FormItem Label="Name">
            <Input @bind-Value="@context.Name" />
        </FormItem>
    </Form>
</Modal>

 @code {
    bool Loading = true;

    bool EditGenreVisible = false;
    Genre GenreContext = new();

    protected override async Task OnInitializedAsync()
    {
        Loading = false;
    }

    async Task UpdateOrAdd()
    {
        try
        {
            using (var genreService = DatabaseServiceFactory.Create<GenreService>())
            {
                if (GenreContext.Id == Guid.Empty)
                {
                    await genreService.AddMissingAsync(x => x.Name == GenreContext.Name, GenreContext);

                    MessageService.Success($"{GenreContext.Name} was added!");
                }
                else
                {
                    await genreService.UpdateAsync(GenreContext);

                    MessageService.Success($"{GenreContext.Name} was updated!");
                }
            }
        }
        catch (Exception ex)
        {
            if (GenreContext.Id == Guid.Empty)
                MessageService.Error($"Could not add {GenreContext.Name}!");
            else
                MessageService.Error($"Could not update {GenreContext.Name}!");

            Logger.LogError(ex, $"Could not update {GenreContext.Name}!");
        }

        await CloseEdit();
    }

    async Task OpenEdit(Genre genre)
    {
        if (genre != null)
            GenreContext = genre;

        EditGenreVisible = true;

        await InvokeAsync(StateHasChanged);
    }

    async Task CloseEdit()
    {
        EditGenreVisible = false;

        await InvokeAsync(StateHasChanged);
    }

    async Task Delete(Genre Genre)
    {
        Loading = true;

        using (var genreService = DatabaseServiceFactory.Create<GenreService>())
        {
            await genreService.DeleteAsync(Genre);
        }

        Loading = false;
    }
}
