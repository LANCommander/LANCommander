@inject DatabaseServiceFactory DatabaseServiceFactory

<Space>
    @if (!Editing)
    {
        <SpaceItem>
            <a href="/@Page.Route" target="_blank">/@Page.Route.Substring(0, Page.Route.Length - Page.Slug.Length)<strong>@Page.Slug</strong></a>
        </SpaceItem>

        <SpaceItem>
            <Button Size="ButtonSize.Small" OnClick="Edit">Edit</Button>
        </SpaceItem>
    }
    else
    {
        <SpaceItem>
            <AntDesign.Input @bind-Value="Page.Slug" OnBlur="GenerateSlug" Size="@InputSize.Small">
                <AddOnBefore>@ComputedParentRoute</AddOnBefore>
            </AntDesign.Input>
        </SpaceItem>

        <SpaceItem>
            <Button Size="ButtonSize.Small" OnClick="Save" Type="@ButtonType.Primary">Save</Button>
        </SpaceItem>
    }
</Space>

@code {
    [Parameter] public Page Page { get; set; }
    [Parameter] public EventCallback<Page> PageChanged { get; set; }

    bool Editing { get; set; } = false;
    string ComputedParentRoute = "";

    protected override void OnInitialized()
    {
        GenerateSlug();
    }

    void Edit()
    {
        Editing = true;
    }

    void GenerateSlug()
    {
        Page.Slug = Page.Slug.ToUrlSlug();
        Page.Route = PageService.RenderRoute(Page);

        ComputedParentRoute = $"/" + Page.Route.Substring(0, Page.Route.Length - Page.Slug.Length);
    }

    async Task Save()
    {
        GenerateSlug();

        Page.Route = PageService.RenderRoute(Page);

        if (PageChanged.HasDelegate)
            await PageChanged.InvokeAsync(Page);

        Editing = false;
    }
}
