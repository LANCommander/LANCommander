@page "/Profile/Saves"
@using LANCommander.Server.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.EntityFrameworkCore;
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageHeader Title="Game Saves">
    <PageHeaderExtra>
        <Select TItem="Game"
                TItemValue="Guid"
                AutoFocus="true"
                DataSource="@Games.OrderBy(g => String.IsNullOrWhiteSpace(g.SortTitle) ? g.Title : g.SortTitle)"
                @bind-Value="@GameId"
                LabelName="Title"
                ValueName="Id"
                Placeholder="Select a Game"
                DefaultActiveFirstOption="false"
                EnableSearch
                Style="min-width: 250px;">
            <ItemTemplate Context="game">
                <Image Src="@GetIcon(game)" Height="32" Width="32" Preview="false"></Image>
                @game.Title
            </ItemTemplate>
        </Select>
    </PageHeaderExtra>
</PageHeader>

<div style="padding: 0 24px;">
    <Table TItem="GameSave" DataSource="@GameSaves.Where(gs => gs.Game != null && gs.Game.Id == GameId)">
        <PropertyColumn Property="s => (s.Game == null ? String.Empty : s.Game.Title)" Sortable Title="Game" />
        <PropertyColumn Property="s => s.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
        <ActionColumn Title="">
            <Flex Gap="FlexGap.Small" Justify="FlexJustify.End" Wrap="FlexWrap.NoWrap">
                <a href="/Download/Save/@(context.Id)" target="_blank" class="ant-btn ant-btn-text ant-btn-icon-only">
                    <Icon Type="@IconType.Outline.Download"/>
                </a>
                
                <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this game save?">
                    <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger/>
                </Popconfirm>
            </Flex>
        </ActionColumn>
    </Table>
</div>

 @code {
    User User = new User();
    ICollection<GameSave> GameSaves = new List<GameSave>();
    IEnumerable<Game> Games = new List<Game>();

    bool Loading = true;
    Guid GameId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData() {
        Loading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        using (var userService = DatabaseServiceFactory.Create<UserService>())
        {
            /*if (authState.User.Identity.IsAuthenticated)
                User = await userService
                    .Include(u => u.GameSaves)
                    //.Include(u => u.GameSaves.Game)
                    .GetAsync(authState.User.Identity.Name);*/
        }

        using (var gameSaveService = DatabaseServiceFactory.Create<GameSaveService>())
        {
            GameSaves = (await gameSaveService
                .Include(gs => gs.Game)
                .SortBy(gs => gs.Game.Title)
                .GetAsync(gs => gs.UserId == User.Id)).OrderByDescending(gs => gs.UpdatedOn).ToList();
        }

        if (GameSaves != null && GameSaves.Count > 0)
            Games = GameSaves.Where(gs => gs.Game != null).Select(gs => gs.Game).DistinctBy(g => g.Id).ToList();

        Loading = false;
    }

    async Task Download(Guid id)
    {
        await JSRuntime.InvokeAsync<object>("open", $"/Saves/Download/{id}", "_blank");
    }

    async Task Delete(GameSave gameSave)
    {
        GameSaves = new List<GameSave>();

        Loading = true;

        using (var gameSaveService = DatabaseServiceFactory.Create<GameSaveService>())
        {
            await gameSaveService.DeleteAsync(gameSave);
        }

        await LoadData();

        Loading = false;
    }

    string GetIcon(Game game)
    {
        var media = game?.Media?.FirstOrDefault(m => m.Type == SDK.Enums.MediaType.Icon);

        if (media != null)
            return $"/api/Media/{media.Id}/Download?fileId={media.FileId}";
        else
            return "/favicon.ico";
    }
}
