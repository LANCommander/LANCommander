@using System.Net;
@using System.Diagnostics;
@using Hangfire;
@using LANCommander.SDK.Enums
@using LANCommander.Server.Jobs.Background;
@using Microsoft.EntityFrameworkCore;
@inherits FeedbackComponent<ImportDialogOptions>
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject NavigationManager NavigationService
@inject IMessageService MessageService
@inject IJSRuntime JS
@inject ILogger<ImportUploadDialog> Logger

<Space Direction="SpaceDirection.Vertical" Style="width: 100%;">
    <SpaceItem>
        <ChunkUploader
            @ref="ChunkUploader"
            Accept=".lcx"
            @bind-File="File"
            @bind-Status="Status"
            StorageLocationId="StorageLocation.Id"
            OnUploadCompleted="OnUploadCompleted"
            OnUploadError="OnUploadError">
            <Text>
                <p>Drag and Drop</p>
                <p>or</p>
                <p>
                    <Button Type="@ButtonType.Primary" Style="margin-top: 8px;">Browse</Button>
                </p>
            </Text>
            <Hint>@Options.Hint</Hint>
        </ChunkUploader>
    </SpaceItem>
    
    <SpaceItem>
        <StorageLocationSelector @bind-Value="StorageLocation" Type="StorageLocationType.Archive" />
    </SpaceItem>
</Space>

<Flex Justify="FlexJustify.End" Gap="FlexGap.Small">
    <Button OnClick="Start" Disabled="@(File == null || Status != "")" Type="@ButtonType.Primary">Upload</Button>
    <Button OnClick="Cancel">Cancel</Button>
</Flex>

@code {
    IBrowserFile File;
    ChunkUploader ChunkUploader;
    StorageLocation StorageLocation = new();

    string RootPath = Path.GetPathRoot(Directory.GetCurrentDirectory());

    bool IsValid = false;
    string Filename;
    string Status;

    async Task Start()
    {
        await ChunkUploader.Start();
    }

    async Task Clear()
    {
        await ChunkUploader.Clear();
    }

    async Task Cancel()
    {
        await ChunkUploader.Clear();
        await CloseFeedbackAsync();
    }

    public async Task OnUploadCompleted(string data)
    {
        if (Guid.TryParse(data, out var objectKey))
        {
            try
            {
                using (var serverService = DatabaseServiceFactory.Create<ServerService>())
                {
                    var server = await serverService.ImportAsync(objectKey);

                    await InvokeAsync(StateHasChanged);

                    MessageService.Success($"{server.Name} successfully imported!");

                    await CloseFeedbackAsync();
                }
            }
            catch (Exception ex)
            {
                MessageService.Error("An unknown error occurred while trying to import");
                Logger.LogError(ex, "An unknown error occurred while trying to import");
            }
        }
        else
        {
            await InvokeAsync(StateHasChanged);

            MessageService.Error("Import file failed to upload!");
            Logger.LogError("Import file failed to upload!");

            await CloseFeedbackAsync();
        }

        await Clear();
    }

    public async Task OnUploadError(string message)
    {
        await InvokeAsync(StateHasChanged);

        MessageService.Error("An error occurred while trying to import");
        Logger.LogError($"An error occurred while trying to import: {message}");

        await CloseFeedbackAsync();
    }
}