@inject DatabaseServiceFactory DatabaseServiceFactory
@inject ServerProcessService ServerProcessService
@inject IMessageService MessageService
@inject INotificationService NotificationService
@implements IAsyncDisposable

<Flex Gap="FlexGap.Large" Align="FlexAlign.Center">
    @switch (Status)
    {
        case ServerProcessStatus.Running:
            <Badge Status="BadgeStatus.Success" Text="Running" />
            break;

        case ServerProcessStatus.Starting:
            <Badge Status="BadgeStatus.Processing" Text="Starting" />
            break;

        case ServerProcessStatus.Error:
            <Badge Status="BadgeStatus.Error" Text="Error" />
            break;

        case ServerProcessStatus.Stopped:
            <Badge Status="BadgeStatus.Default" Text="Stopped" />
            break;

        case ServerProcessStatus.Stopping:
            <Badge Status="BadgeStatus.Error" Text="Stopping" />
            break;

        default:
            <Badge Status="BadgeStatus.Warning" Text="Retrieving" />
            break;
    }

    @if (Status != ServerProcessStatus.Running)
    {
        <Button Type="@ButtonType.Primary" OnClick="() => Start()" Disabled="Status != ServerProcessStatus.Stopped && Status != ServerProcessStatus.Error">Start</Button>
    }
    else
    {
        <Popconfirm OnConfirm="() => Stop()" Title="Are you sure you want to kill this server process?">
            <Button Danger Type="@ButtonType.Primary">Stop</Button>
        </Popconfirm>
    }
</Flex>

@code {
    [Parameter] public Guid ServerId { get; set; }

    Server Server;
    Timer Timer;

    ServerProcessStatus Status = ServerProcessStatus.Retrieving;

    protected override async Task OnInitializedAsync()
    {
        using (var serverService = DatabaseServiceFactory.Create<ServerService>())
        {
            Server = await serverService.GetAsync(ServerId);
        }

        ServerProcessService.OnStatusUpdate += OnStatusUpdate;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Timer = new Timer(async (object? stateInfo) =>
            {
                Status = ServerProcessService.GetStatus(Server);

                await InvokeAsync(StateHasChanged);
            }, new AutoResetEvent(false), 2000, 2000);
        }
    }

    void OnStatusUpdate(object sender, ServerStatusUpdateEventArgs args)
    {
        if (args?.Server?.Id == ServerId)
        {
            Status = args.Status;

            if (Status == ServerProcessStatus.Error)
            {
                NotificationService.Error(new NotificationConfig
                {
                    Message = $"Error starting server {args.Server.Name}",
                    Description = args.Exception.Message,
                });
            }
        }
    }

    async Task Start()
    {
        await ServerProcessService.StartServerAsync(Server.Id);
    }

    void Stop()
    {
        ServerProcessService.StopServerAsync(Server.Id);
    }

    public async ValueTask DisposeAsync()
    {
        if (Timer != null)
            await Timer.DisposeAsync();
    }
}