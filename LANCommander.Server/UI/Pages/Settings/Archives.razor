@page "/Settings/Archives"
@using LANCommander.Server.Models;
@using Microsoft.EntityFrameworkCore
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject ILogger<Archives> Logger
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]

<PageHeader Title="Archives" />

<div style="padding: 0 24px;">
    <Form Model="Settings" Layout="@FormLayout.Vertical">
        <FormItem Label="Enable Patching">
            <Switch @bind-Checked="context.Archives.EnablePatching" />
        </FormItem>

        <FormItem Label="Allow Insecure Downloads">
            <Switch @bind-Checked="context.Archives.AllowInsecureDownloads" />
        </FormItem>

        <FormItem Label="Max Upload Chunk Size (MB)">
            <AntDesign.InputNumber @bind-Value="context.Archives.MaxChunkSize" Min="1" DefaultValue="50" />
        </FormItem>

        <FormItem Label="Storage Paths">
            <Space Direction="SpaceDirection.Vertical" Size="SpaceSize.Middle" Style="width: 100%">
                <SpaceItem>
                    <Table TItem="Data.Models.StorageLocation" DataSource="@StorageLocations" HidePagination="true" Responsive Context="storageLocation">
                        <PropertyColumn Property="l => l.Path">
                            <FilePicker @bind-Value="storageLocation.Path" AllowDirectories="true" Title="Select Storage Location" Root="@RootPath" OnSelected="(path) => OnPathSelected(storageLocation, path)" />
                        </PropertyColumn>
                        <PropertyColumn Property="l => l.Default" Title="Default" Align="ColumnAlign.Right">
                            <Checkbox @bind-Checked="storageLocation.Default" />
                        </PropertyColumn>
                        <ActionColumn>
                            <Space Style="display: flex; justify-content: end">
                                <SpaceItem>
                                    <Popconfirm OnConfirm="() => RemoveStorageLocation(storageLocation)" Title="Are you sure you want to remove this storage location?">
                                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                                    </Popconfirm>
                                </SpaceItem>
                            </Space>
                        </ActionColumn>
                    </Table>
                </SpaceItem>

                <SpaceItem>
                    <GridRow Justify="RowJustify.End">
                        <GridCol>
                            <Button OnClick="AddStorageLocation" Type="@ButtonType.Primary">Add Path</Button>
                        </GridCol>
                    </GridRow>
                </SpaceItem>
            </Space>
        </FormItem>

        <FormItem>
            <Button OnClick="Save" Type="@ButtonType.Primary">Save</Button>
        </FormItem>
    </Form>
</div>

@code {
    Settings Settings = SettingService.GetSettings();
    ICollection<StorageLocation> StorageLocations;

    string RootPath = Path.GetPathRoot(Directory.GetCurrentDirectory());

    protected override async Task OnInitializedAsync()
    {
        Settings = SettingService.GetSettings();

        using (var storageLocationService = DatabaseServiceFactory.Create<StorageLocationService>())
        {
            StorageLocations = await storageLocationService.GetAsync(l => l.Type == SDK.Enums.StorageLocationType.Archive);
        }
    }

    async Task Save()
    {
        try
        {
            SettingService.SaveSettings(Settings);

            foreach (var storageLocation in StorageLocations)
            {
                if (!StorageLocations.Any(l => l.Default))
                    storageLocation.Default = true;

                using (var storageLocationService = DatabaseServiceFactory.Create<StorageLocationService>())
                {
                    if (storageLocation.Id != Guid.Empty)
                        await storageLocationService.UpdateAsync(storageLocation);
                    else
                        await storageLocationService.AddAsync(storageLocation);
                }
            }

            MessageService.Success("Settings saved!");
        }
        catch (Exception ex)
        {
            MessageService.Error("An unknown error occurred.");
            Logger.LogError(ex, "An unknown error occurred.");
        }
    }

    void OnPathSelected(StorageLocation storageLocation, string path)
    {
        var appPath = Directory.GetCurrentDirectory();

        if (path != null && path.StartsWith(appPath))
            path = path.Substring(appPath.Length).TrimStart(Path.DirectorySeparatorChar).TrimEnd(Path.DirectorySeparatorChar);

        storageLocation.Path = path;
    }

    async Task AddStorageLocation()
    {
        StorageLocations.Add(new StorageLocation());

        StateHasChanged();
    }

    async Task RemoveStorageLocation(StorageLocation storageLocation)
    {
        StorageLocations.Remove(storageLocation);
    }
}
