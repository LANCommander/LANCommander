@page "/Settings/Roles/{id:guid}"
@using LANCommander.Server.Models;
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject NavigationManager NavigationManager
@inject ILogger<Edit> Logger
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]

<PageHeader Title="Edit Role">
    <PageHeaderExtra>
        <Space Direction="SpaceDirection.Horizontal">
            <SpaceItem>
                <Button Type="ButtonType.Primary" OnClick="Save">Save</Button>
            </SpaceItem>
        </Space>
    </PageHeaderExtra>
</PageHeader>

<div style="padding: 0 24px;">
    <Form Model="@Role" Layout="@FormLayout.Vertical">
        <FormItem Label="Name">
            <Input @bind-Value="Role.Name" />
        </FormItem>
        <FormItem Label="Collections">
            <TransferInput LeftTitle="Available" RightTitle="Allowed" DataSource="Collections" TitleSelector="c => c.Name" @bind-Values="SelectedCollections" />
        </FormItem>
    </Form>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    Role Role = new Role();
    IEnumerable<Collection> Collections = new List<Collection>();

    ICollection<Collection> SelectedCollections = new List<Collection>();

    protected override async Task OnInitializedAsync()
    {
        using (var roleService = DatabaseServiceFactory.Create<RoleService>())
        {
            Role = await roleService.DisableTracking().Include(r => r.Collections).GetAsync(Id);

            SelectedCollections = Role.Collections;
        }

        using (var collectionService = DatabaseServiceFactory.Create<CollectionService>())
        {
            Collections = await collectionService.GetAsync();
        }
    }

    async Task Save()
    {
        try
        {
            using (var roleService = DatabaseServiceFactory.Create<RoleService>())
            {
                await roleService.UpdateAsync(Role);
                await roleService.AssignCollections(Id, SelectedCollections.Select(c => c.Id));
            }

            MessageService.Success("Role updated!");
        }
        catch (Exception ex)
        {
            MessageService.Error("Role could not be updated!");
            Logger.LogError(ex, "Role could not be updated!");
        }
    }
}
