@page "/Settings/Tools/MissingArchives"
@using LANCommander.Server.Models;
@using LANCommander.Server.UI.Pages.Games.Components;
@inject DatabaseServiceFactory DatabaseServiceFactory
@inject IMessageService MessageService
@inject ILogger<MissingArchives> Logger
@attribute [Authorize(Roles = RoleService.AdministratorRoleName)]

<PageHeader Title="Missing Archives" />

<div style="padding: 0 24px;">
    <p>
        These archives are missing their backing file in the "Upload" directory of your server. This may result in broken downloads for clients. To fix, either upload a new file or delete the offending archive.
    </p>

    <Table TItem="Archive" DataSource="@Archives" Loading="@Loading" Responsive>
        <PropertyColumn Property="a => a.Version" Sortable />
        <PropertyColumn Property="a => a.Game.Title" Title="Game" />
        <PropertyColumn Property="a => a.CreatedOn" Format="MM/dd/yyyy hh:mm tt" Sortable />
        <PropertyColumn Property="a => a.CreatedBy" Sortable>
            @context.CreatedBy?.UserName
        </PropertyColumn>
        <ActionColumn Title="" Style="text-align: right">
            <Space Direction="SpaceDirection.Horizontal">
                <SpaceItem>
                    <Button OnClick="() => Upload(context)" Icon="@IconType.Outline.Upload" Type="@ButtonType.Text" />
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm OnConfirm="() => Delete(context)" Title="Are you sure you want to delete this archive?">
                        <Button Icon="@IconType.Outline.Close" Type="@ButtonType.Text" Danger />
                    </Popconfirm>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>

    <ArchiveUploader @ref="Uploader" OnArchiveUploaded="LoadData" />
</div>


 @code {
    ICollection<Archive> Archives;
    bool Loading = true;

    ArchiveUploader Uploader;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        Loading = true;

        Archives = new List<Archive>();

        using (var archiveService = DatabaseServiceFactory.Create<ArchiveService>())
        {
            foreach (var archive in await archiveService.GetAsync())
            {
                var archivePath = await archiveService.GetArchiveFileLocationAsync(archive);
                var exists = await archiveService.ExistsAsync(archive.Id);

                if (!exists)
                    Archives.Add(archive);
                else if (new FileInfo(archivePath).Length == 0)
                    Archives.Add(archive);
            }
        }

        Loading = false;
    }

    async Task Upload(Archive archive)
    {
        using (var archiveService = DatabaseServiceFactory.Create<ArchiveService>())
        {
            var archiveFilePath = await archiveService.GetArchiveFileLocationAsync(archive);

            if (await archiveService.ExistsAsync(archive.Id))
                File.Delete(archiveFilePath);

            System.IO.File.Create(archiveFilePath).Close();
        }

        await Uploader.Open(archive.Id);
    }

    async Task Delete(Archive archive)
    {
        try
        {
            using (var archiveService = DatabaseServiceFactory.Create<ArchiveService>())
            {
                await archiveService.DeleteAsync(archive);
            }

            await LoadData();

            await MessageService.Success("Archive deleted!");
        }
        catch (Exception ex)
        {
            MessageService.Error("Archive could not be deleted.");
            Logger.LogError(ex, "Archive could not be deleted.");
        }
    }
}
